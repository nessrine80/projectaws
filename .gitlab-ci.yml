stages:
  - build
  - deploy
  - init
  - terraform_apply
  - terraform_destroy

variables:
  AWS_REGION: $AWS_DEFAULT_REGION

# 1. Build and push Docker image if commit message is "change image"
build_and_push:
  stage: build
  rules:
    - if: '$CI_COMMIT_BRANCH == "main" && $CI_COMMIT_MESSAGE == "change image"'
  image: docker:latest
  services:
    - docker:dind
  script:
    - cd app
    - echo "üîê Logging into ECR..."
    - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REPOSITORY
    - export IMAGE_TAG=$CI_PIPELINE_ID
    - echo "üê≥ Building image $ECR_REPOSITORY:$IMAGE_TAG"
    - docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
    - echo "üì§ Pushing image to ECR"
    - docker push $ECR_REPOSITORY:$IMAGE_TAG

# 2. Deploy to Kubernetes if commit message is "k8s deploy"
deploy_to_k8s:
  stage: deploy
  rules:
    - if: '$CI_COMMIT_BRANCH == "main" && $CI_COMMIT_MESSAGE == "k8s deploy"'
  image: mesosphere/aws-cli
  script:
    - cd k8s
    - echo "üì° Configuring kubectl for EKS..."
    - aws eks update-kubeconfig --name hr-stag-eksdemo1 --region $AWS_REGION
    - echo "üîç Getting latest image tag from ECR..."
    - export IMAGE_TAG=$(aws ecr describe-images \
        --repository-name $ECR_REPO_NAME \
        --region $AWS_REGION \
        --query 'sort_by(imageDetails,& imagePushedAt)[-1].imageTags[0]' \
        --output text)
    - export IMAGE_URI="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO_NAME}:${IMAGE_TAG}"
    - echo "‚úÖ Using image: $IMAGE_URI"
    - sed "s|image: .*|image: ${IMAGE_URI}|" deployment.yml > updated.yml
    - mv updated.yml deployment.yml
    - echo "üöÄ Applying Kubernetes manifests..."
    - kubectl apply -f deployment.yml
    - kubectl apply -f svc.yml

# 3. Initialize backend manually (one time only)
init_remote_backend:
  stage: init
  when: manual
  image: amazon/aws-cli
  script:
    - chmod +x infra/init-backend.sh
    - ./infra/init-backend.sh

# 4. Terraform Apply
terraform_apply:
  stage: terraform_apply
  rules:
    - if: '$CI_COMMIT_BRANCH == "main" && $CI_COMMIT_MESSAGE =~ /^terraform apply.*/'
  image: hashicorp/terraform:1.4.6
  script:
    - cd infra
    - terraform init
    - terraform apply --auto-approve

# 5. Terraform Destroy (manual)
terraform_destroy:
  stage: terraform_destroy
  rules:
    - if: '$CI_COMMIT_BRANCH == "main" && $CI_COMMIT_MESSAGE =~ /^terraform destroy.*/'
  when: manual
  image: hashicorp/terraform:1.4.6
  script:
    - cd infra
    - echo "üóëÔ∏è Cleaning ECR repository..."
    - |
      IMAGE_IDS=$(aws ecr list-images \
        --repository-name $ECR_REPO_NAME \
        --region $AWS_REGION \
        --query 'imageIds[*]' \
        --output json)

      if [ "$IMAGE_IDS" != "[]" ]; then
        echo "üî• Deleting images from $ECR_REPO_NAME"
        aws ecr batch-delete-image --repository-name $ECR_REPO_NAME --region $AWS_REGION --image-ids "$IMAGE_IDS"
      else
        echo "‚úÖ No images to delete"
      fi
    - terraform init
    - terraform destroy --auto-approve
